name: CI

on:
  push:
  pull_request:

jobs:
  test-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        backend:
          - cyclone
          - gcrypt
          - mbedtls
          - nettle
          - openssl
        buildtype:
          - Debug
          - Release
        compiler:
          - gcc
          - clang
        sanitizer:
          - VALGRIND
          - ASAN
          - UBSAN
        exclude:
          # Valgrind currently does not support dwarf2 produced by clang.
          - compiler: clang
            sanitizer: VALGRIND
          # TODO: resolve this memory leak if it is real. It did not appear in
          # CI runs on ubuntu-22.04 but only started happening once GitHub
          # changed the default to ubuntu-24.04.
          - backend: gcrypt
            sanitizer: ASAN
    steps:
      - uses: actions/checkout@v5
      - name: Install CycloneCRYPTO
        if: matrix.backend == 'cyclone'
        working-directory: ${{github.workspace}}/tools/cyclone-ci
        run: |
          wget -O Common-2.5.2.tar.gz "https://github.com/Oryx-Embedded/Common/archive/refs/tags/v2.5.2.tar.gz" \
            && wget -O CycloneCRYPTO-2.5.2.tar.gz "https://github.com/Oryx-Embedded/CycloneCRYPTO/archive/refs/tags/v2.5.2.tar.gz" \
            && tar -xzf Common-2.5.2.tar.gz \
            && tar -xzf CycloneCRYPTO-2.5.2.tar.gz \
            && rm -rf Common-2.5.2.tar.gz CycloneCRYPTO-2.5.2.tar.gz \
            && mv Common-2.5.2 common \
            && mv CycloneCRYPTO-2.5.2 cyclone_crypto \
            && CC=${{matrix.compiler}} make libcyclonecrypto.a \
            && echo "CFLAGS=-I$(pwd)/config -I$(pwd)/common -I$(pwd)/cyclone_crypto" >> "$GITHUB_ENV" \
            && echo "LDFLAGS=-L$(pwd)" >> "$GITHUB_ENV"
      - name: Install libgcrypt20-dev
        if: matrix.backend == 'gcrypt'
        run: sudo apt-get update && sudo apt-get install -y libgcrypt20-dev
      - name: Install mbedtls
        if: matrix.backend == 'mbedtls'
        run: |
          wget "https://github.com/Mbed-TLS/mbedtls/releases/download/mbedtls-3.6.4/mbedtls-3.6.4.tar.bz2" \
            && tar -xjf mbedtls-3.6.4.tar.bz2 \
            && cd mbedtls-3.6.4 \
            && make no_test \
            && sudo make install \
            && rm -rf mbedtls-3.6.4.tar.bz2 mbedtls-3.6.4
      - name: Install nettle
        if: matrix.backend == 'nettle'
        run: sudo apt-get install -y nettle-dev
      - name: Install valgrind
        if: matrix.sanitizer == 'VALGRIND'
        run: sudo apt install -y valgrind
      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake ${{github.workspace}} -DCRYPTO_BACKEND=${{matrix.backend}} -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_C_COMPILER=${{matrix.compiler}} -DENABLE_${{matrix.sanitizer}}=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.buildtype}}
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: ctest -C ${{matrix.buildtype}} --output-on-failure
  test-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        backend:
          - nettle
          - openssl
        buildtype:
          - Debug
          - Release
        compiler:
          - gcc
          - clang
        sanitizer:
          - ASAN
          - UBSAN
    steps:
      - uses: actions/checkout@v5
      - name: Install nettle
        if: matrix.backend == 'nettle'
        run: |
          brew install nettle \
            && brew ls --verbose nettle \
            && echo "CFLAGS=$(pkg-config --cflags nettle)" >> "$GITHUB_ENV" \
            && echo "LDFLAGS=$(pkg-config --libs nettle)" >> "$GITHUB_ENV"
      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake ${{github.workspace}} -DCRYPTO_BACKEND=${{matrix.backend}} -DCMAKE_BUILD_TYPE=${{matrix.buildtype}} -DCMAKE_C_COMPILER=${{matrix.compiler}} -DENABLE_${{matrix.sanitizer}}=ON
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.buildtype}}
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: ctest -C ${{matrix.buildtype}} --output-on-failure
  test-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        backend:
          - openssl
        buildtype:
          - Debug
          - Release
    steps:
      - uses: actions/checkout@v5
      - name: Install OpenSSL
        run: choco install --confirm --no-progress openssl --version 3.1.1
      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake ${{github.workspace}} -DCRYPTO_BACKEND=${{matrix.backend}} -DCMAKE_BUILD_TYPE=${{matrix.buildtype}}
      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.buildtype}}
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: ctest -C ${{matrix.buildtype}} --output-on-failure
